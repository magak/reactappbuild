{"version":3,"sources":["components/MainAppBar.tsx","components/Copyright.tsx","core/Dashboard.tsx","components/Home.tsx","App.tsx","serviceWorker.ts","theme.tsx","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","title","MainAppBar","classes","React","useState","auth","anchorEl","setAnchorEl","open","Boolean","handleClose","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","aria-controls","aria-haspopup","onClick","event","currentTarget","id","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","MenuItem","Copyright","Container","align","Date","getFullYear","Dashboard","Paper","style","height","elevation","HomePage","Box","width","display","flexDirection","bgcolor","p","App","window","location","hostname","match","createMuiTheme","palette","primary","main","secondary","error","red","A400","background","default","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"2XAkCMA,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaL,EAAMM,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,QAKD,SAASK,IACtB,IAAMC,EAAUX,IADmB,EAEpBY,IAAMC,UAAS,GAAvBC,EAF4B,sBAGHF,IAAMC,SAA6B,MAHhC,mBAG5BE,EAH4B,KAGlBC,EAHkB,KAI7BC,EAAOC,QAAQH,GAMfI,EAAc,WAClBH,EAAY,OAGd,OACE,yBAAKI,UAAWT,EAAQP,MACtB,kBAACiB,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQL,UAAWT,EAAQL,WAAYoB,MAAM,UAAUC,aAAW,QACjF,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKT,UAAWT,EAAQF,OAA5C,aAGCK,GACC,6BACE,kBAACU,EAAA,EAAD,CACEG,aAAW,0BACXG,gBAAc,cACdC,gBAAc,OACdC,QAxBK,SAACC,GAClBjB,EAAYiB,EAAMC,gBAwBNR,MAAM,WAEN,kBAAC,IAAD,OAEF,kBAAC,IAAD,CACES,GAAG,cACHpB,SAAUA,EACVqB,aAAc,CACZC,SAAU,MACVC,WAAY,SAEdC,aAAW,EACXC,gBAAiB,CACfH,SAAU,MACVC,WAAY,SAEdrB,KAAMA,EACNwB,QAAStB,GAET,kBAACuB,EAAA,EAAD,CAAUV,QAASb,GAAnB,WACA,kBAACuB,EAAA,EAAD,CAAUV,QAASb,GAAnB,mB,YC9FD,SAASwB,IACtB,OACE,kBAACC,EAAA,EAAD,KACE,kBAAChB,EAAA,EAAD,CAAYC,QAAQ,QAAQH,MAAM,gBAAiBmB,MAAM,UACtD,mBACA,IAAIC,MAAOC,cACX,M,qBCPM,SAASC,IACpB,OACI,kBAACC,EAAA,EAAD,CAAOC,MAAO,CAACC,OAAQ,WAAYC,UAAW,ICwBvC,SAASC,IAGpB,OACE,kBAACC,EAAA,EAAD,CAAKJ,MAAO,CAAEK,MAAO,OAAQJ,OAAQ,OAAQ7B,SAAU,YACjDkC,QAAQ,OAAOC,cAAc,SAASC,QAAQ,oBAClD,kBAACJ,EAAA,EAAD,CAAKK,EAAG,GACN,kBAACjD,EAAD,OAEF,kBAAC4C,EAAA,EAAD,CAAKK,EAAG,EAAGtD,SAAU,EAAG6C,MAAO,CAACC,OAAQ,SACtC,kBAACH,EAAD,OAEF,kBAACM,EAAA,EAAD,CAAKK,EAAG,GACN,kBAAChB,EAAD,QC9BKiB,MANf,WACE,OACA,kBAACP,EAAD,OCGkBnC,QACW,cAA7B2C,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6BCIS9D,EAlBD+D,YAAe,CAC3BC,QAAS,CACPC,QAAS,CACPC,KAAM,WAERC,UAAW,CACTD,KAAM,WAERE,MAAO,CACLF,KAAMG,IAAIC,MAEZC,WAAY,CACVC,QAAS,SAGblE,QAAS,ICTXmE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAA,EAAD,CAAe5E,MAAOA,GAEpB,kBAAC6E,EAAA,EAAD,MACA,kBAAC,EAAD,QAGJC,SAASC,eAAe,SFyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAlB,GACLmB,QAAQnB,MAAMA,EAAMoB,c","file":"static/js/main.7023fc19.chunk.js","sourcesContent":["/*\r\nimport React from 'react';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\n\r\nexport interface MainAppBarProps {};\r\n\r\ninterface MainAppBarState {};\r\n\r\nclass MainAppBar extends React.Component<MainAppBarProps, MainAppBarState> {\r\n    render() {\r\n        return (\r\n          <AppBar position=\"fixed\" color=\"primary\" >\r\n            <Toolbar></Toolbar>\r\n          </AppBar>\r\n          );\r\n    }\r\n}\r\n\r\nexport default MainAppBar;\r\n*/\r\n\r\nimport React from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n  }),\r\n);\r\n\r\nexport default function MainAppBar() {\r\n  const classes = useStyles();\r\n  const [auth] = React.useState(true);\r\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n  const open = Boolean(anchorEl);\r\n\r\n  const handleMenu = (event: React.MouseEvent<HTMLElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Dashboard\r\n          </Typography>\r\n          {auth && (\r\n            <div>\r\n              <IconButton\r\n                aria-label=\"account of current user\"\r\n                aria-controls=\"menu-appbar\"\r\n                aria-haspopup=\"true\"\r\n                onClick={handleMenu}\r\n                color=\"inherit\"\r\n              >\r\n                <AccountCircle />\r\n              </IconButton>\r\n              <Menu\r\n                id=\"menu-appbar\"\r\n                anchorEl={anchorEl}\r\n                anchorOrigin={{\r\n                  vertical: 'top',\r\n                  horizontal: 'right',\r\n                }}\r\n                keepMounted\r\n                transformOrigin={{\r\n                  vertical: 'top',\r\n                  horizontal: 'right',\r\n                }}\r\n                open={open}\r\n                onClose={handleClose}\r\n              >\r\n                <MenuItem onClick={handleClose}>Profile</MenuItem>\r\n                <MenuItem onClick={handleClose}>My account</MenuItem>\r\n              </Menu>\r\n            </div>\r\n          )}\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\n// import Box from '@material-ui/core/Box';\r\n\r\nexport default function Copyright() {\r\n  return (\r\n    <Container>\r\n      <Typography variant=\"body2\" color=\"textSecondary\"  align=\"center\">\r\n        {'Copyright Â© '}        \r\n        {new Date().getFullYear()}\r\n        {'.'}\r\n      </Typography>\r\n    </Container>\r\n  );\r\n}","import React from 'react';\r\n// import { spacing } from '@material-ui/system';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nexport default function Dashboard() {\r\n    return (\r\n        <Paper style={{height: 'inherit'}} elevation={5} />\r\n    );\r\n}","import React from 'react';\r\n// import { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\n\r\nimport '../App.css';\r\nimport MainAppBar from './MainAppBar'\r\nimport Copyright from './Copyright';\r\nimport Box from '@material-ui/core/Box';\r\nimport Dashboard from '../core/Dashboard';\r\n\r\n// const useStyles = makeStyles((theme: Theme) =>\r\n//       createStyles({\r\n//         home: {\r\n//           display: 'flex',\r\n//           flexDirection: 'column'\r\n//         },\r\n//         appbar: {\r\n//           // flex: 0 0 auto;\r\n//         },\r\n//         dashboard: {\r\n//         },\r\n//         copyright: {\r\n//           position: 'absolute',\r\n//           bottom: '0',\r\n//           right: '0',          \r\n//           left: '0',\r\n//           height: '100%'\r\n//         }\r\n//       }),\r\n//     );\r\n\r\nexport default function HomePage() {\r\n    // const classes = useStyles();\r\n\r\n    return (\r\n      <Box style={{ width: '100%', height: '100%', position: 'absolute' }} \r\n            display=\"flex\" flexDirection=\"column\" bgcolor=\"background.paper\">\r\n        <Box p={2}>\r\n          <MainAppBar />\r\n        </Box>\r\n        <Box p={2} flexGrow={1} style={{height: '100%'}} >\r\n          <Dashboard />\r\n        </Box>\r\n        <Box p={2}>\r\n          <Copyright />\r\n        </Box>\r\n      </Box>\r\n\r\n      // <div className={classes.home} >\r\n      //   <div className={classes.appbar}>\r\n      //     <MainAppBar />\r\n      //   </div>\r\n      //   {/* <div className={classes.dashboard} >\r\n      //     <Dashboard />\r\n      //   </div> */}\r\n      //   <div className={classes.copyright}>\r\n      //     <Copyright />\r\n      //   </div>\r\n      // </div>\r\n    );\r\n}","import React from 'react';\n\nimport 'typeface-roboto';\n\nimport './App.css';\nimport HomePage from './components/Home';\n\nfunction App() {\n  return (\n  <HomePage/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import red from '@material-ui/core/colors/red';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\n\r\n// A custom theme for this app\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: '#c9eb34',\r\n    },\r\n    secondary: {\r\n      main: '#19857b',\r\n    },\r\n    error: {\r\n      main: red.A400,\r\n    },\r\n    background: {\r\n      default: '#fff',\r\n    },    \r\n  },\r\n  spacing: 2\r\n});\r\n\r\nexport default theme;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport theme from './theme';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n      <CssBaseline />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}